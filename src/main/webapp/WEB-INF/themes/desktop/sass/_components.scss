
/*doc
---
title: small components
name: small components
category: components
---

##pill
<p class="pill">I am a pill</p>
`@extend %pill`


*/

@mixin rounded-pill($background: $clr-highlight, $padding: $pad-default, $border-radius: $border-radius-default) {
  background: $background;
  padding: $padding;
  border-radius: $border-radius;
  color: $clr-btn-text;

  &:hover {
    background: $clr-link-hover;
  }

}
//extend .pill if using defaults in rounded-pill
.pill {
  @include rounded-pill();
}

/*doc
---
title: blocks
name: blocks
category: components
---

Blocks are essentially boxes with some defaults, such as color and bottom margin. You can either use the extendable classes below or the mixin if you need more flexibility. if you are using a certain style over and over feel free to add a extendable class of your own.

### Extendable Classes
We created extendable classes for some commonly used blocks.

example | extension
--------|----------
<p class="block">I am a block - usually on the homepage</p> | `@extend .block`
<div class="padded-example" style="color:black"><p class="block-noshadow">I am a block - with no shadow </p></div> | `@extend .block-noshadow`
<p class="block-card ">I am a block - with padding and no border radius</p> | `@extend .block-card`

###Mixin
We also have a mixin you can use to create your own blocks:
`@include blocks();`

variable  | result   | default
------------------------------------------| ----------------- | ---------
`$radius: top` | default radius on the top corners of block   |  yes
`$radius: none` | no radius  |
`$radius: all` | default radius on all corners of block   |
`$padding: default` | block has a padding of `$pad-small` - 10px   |   yes
`$padding: none` |  block has no padding |
`$padding: NUMBER` | allows you to set the number padding - use variables |
`$color: COLOR` | sets the background color   |   `$white`

*/

@mixin blocks($color: $white, $radius: top, $padding: default, $shadow: default) {
  // set block radius
  @if $radius == top {
    @include border-top-radius();
  } @if $radius == none {
     // no radius
  } @if $radius == all {
    border-radius: $border-radius-default;
}
  // set block padding
  @if $padding == default {
    padding: $pad-small;
  } @else if $padding == none{
    padding: 0;
  } @else {
    padding: $padding;
}
  // set block shadow
  @if $shadow == default{
    @include single-box-shadow();
  } @if $shadow == none{
    // no shadow
  }
  margin-bottom: $grid-gutter;
  background: $color;
}

.block{
  @include blocks();
}
.block-noshadow{
  @include blocks($shadow: none);

}
.block-card {
  @include blocks($radius: none, $padding: none);
}

///PLACEHOLDER STYLES

@mixin stub() {
  background-color: $grey-med-light;
  color: $white;
}

// jcarousel styles - from jquery -
/*
This is the visible area of you carousel.
Set a width here to define how much items are visible.
The width can be either fixed in px or flexible in %.
Position must be relative!
*/
.jcarousel {
  position: relative;
  overflow: hidden;
}

/*
This is the container of the carousel items.
You must ensure that the position is relative or absolute and
that the width is big enough to contain all items.
*/
.jcarousel ul {
  width: 20000em;
  position: relative;

  /* Optional, required in this case since it's a <ul> element */
  list-style: none;
  margin: 0;
  padding: 0;
}

/*
These are the item elements. jCarousel works best, if the items
have a fixed width and height (but it's not required).
*/
.jcarousel li {
  /* Required only for block elements like <li>'s */
  float: left;
}

// small carousel
.carousel-wrap.small {
  $icon-height: rem-calc(30);
  $carousel-width: rem-calc(306);
  // TODO PG-width is set in home.scss
  @extend %brand-shading;
  @extend .block-card;
  margin-right: $pad-default;
  position: relative;
  .block-header {
    @extend %brand-header;
  }
  .carousel {
    li {
      width: $carousel-width;
      padding: $pad-default;
      height: 145px;
      h3 {
        @extend h2;
        @extend %link-text-body;
      }
      p {
        font-size: rem-calc($txt-size-medium);
      }
    }
  }
  .carousel-control {
    position: absolute;
    bottom: 10px;
    left: 50%;
    width: 120px;
    margin-left: -50px;
    .jcarousel-prev,
    .jcarousel-next {
      @extend .fa;
      font-size: $icon-height;
      &:hover {
        @extend .fa-inverse;
      }
    }
    .jcarousel-prev {
      @extend .fa-chevron-circle-left;
    }
    .jcarousel-next {
      @extend .fa-chevron-circle-right;
    }
    .numbers {
      @extend %small-italic;
      color: $grey-med;
      display: inline-block;
      padding: 0 $pad-xsmall;
      vertical-align: top;
      span {
        display: inline-block;
        vertical-align: middle;
        line-height: $icon-height;
        height: $icon-height;
      }
    }
  }
}


/*doc
---
title: icons
name: icons
category: typography
---

We use the fantastic FontAwesome library for most icons. There are a few manipulation functions, found in the documentation.
For icons after text:
use with `::after` example: `.more-link::after { @extend .more-icon }`

example | extension
--------|----------
<a class="example-more-link">more</a>| `@extend .more-icon`
<p class="icon-twitter"> twitter </p> | `@extend .icon-twitter`
<p class="icon-facebook"> facebook</p> | `@extend .icon-facebook`
<p class="icon-email"> email</p> | `@extend .icon-email`

*/

.more-icon {
  // need to use content instead of @extend .fa-chevron-circle-right with ::after;
  content: '\f138';
  @extend .fa;
  @extend .fa-inverse;
  @extend %brand-color;
  padding-left: rem-calc(3);
}

.icon-fa {
  @extend .fa;
  line-height: ($txt-size-xxlarge * 2);
  font-size: $txt-size-xxlarge;
}

.icon-twitter {
  @extend .icon-fa;
  @extend .fa-twitter;
  content: '\f099';
}

.icon-facebook {
  @extend .icon-fa;
  @extend .fa-facebook;
  content: '\f09a';
}

.icon-rss {
  @extend .icon-fa;
  @extend .fa-rss;
  content: '\f09e';
}

.icon-email {
  @extend .icon-fa;
  @extend .fa-envelope-o;
  content: '\f003';
}
.icon-plus {
  @extend .icon-fa;
  @extend .fa-plus-square;
  line-height: normal;
}
.icon-close {
  @extend .icon-fa;
 // @extend .fa-close;
  line-height: normal;
  content: '\f00d';
}
.aria-text {
  position: absolute;
  top: -9999px;
  left: -9999px;
}

.closer {
  background: image-url('icon.sprite.close.png') no-repeat 0 -24px;
  vertical-align: middle;
  display: inline-block;
  width: rem-calc(25);
  height: rem-calc(25);
  @extend %brand-background;
  border-radius: $border-radius-small;
  color: $white;
}

$zindex: (
  modal     : 9000,
  overlay   : 8000,
  dropdown  : 7000,
  topVisible: 6999,
  header    : 6000,
  footer    : 5000
);
/* zindex map use example
.header {
  z-index: map-get($zindex, header);
}
*/
// for one-line truncates 
@mixin truncated ($width: 100%) {
  width: $width;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}



