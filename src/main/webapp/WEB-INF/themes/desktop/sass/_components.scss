
/*doc
---
title: small components
name: small components
category: components
---

##pill
<p class="pill">I am a pill</p>
`@extend .pill`
<p class="pill-small">I am a small pill</p>
`@extend .pill-small`
<p class="button-big">I am button </p>
`@extend .button-big`
<p class="button">I am hoverable button</p>
`@extend .button`
*/

@mixin rounded-pill($background: $clr-highlight, $padding: $pad-default, $border-radius: $border-radius-default, $hover-color: $clr-link-hover, $hover: true) {
  background: $background;
  padding: $padding;
  border-radius: $border-radius;
  color: $clr-btn-text;
  display: inline-block;

  @if $hover == true {
    &:hover {
      @extend %brand-background;

    }
  } @else {
  }

}
//extend .pill if using defaults in rounded-pill
.pill {
  @include rounded-pill();
}

.pill-small {
  @include rounded-pill($padding: $pad-small,  $hover: false);
}

%button-base{
  border-radius: 3px;     //matches production
  width: auto;
  padding: $pad-xsmall;
  height: auto;
  line-height: rem-calc(17);
  font-size: $txt-size-xxxsmall;
  font-weight: $bold;
  color: $white;
  text-transform: uppercase;
}

.button {
  @extend %brand-background-hover;
  @extend %button-base;
}


// to be used with tooltip_hover.js
.button-big{
  @include rounded-pill($padding: 0 $pad-small);
  background: $clr-highlight;
  line-height: rem-calc($button-height);
  font-weight: $bold;
  font-size: $txt-size-mediumish;
  text-align: center;
  &.highlighted{
    @extend %brand-background;
    }
  }

.button-default{
  @extend %brand-background-hover;
  @include rounded-pill($padding: 0 $pad-small);
  line-height: rem-calc($button-height);
  font-family: $font-face-plain;
  font-size: $txt-size-medium;
  text-align: center;
 

  .plosone & {
	  font-size: $txt-size-small;
	  font-weight: $bold;
	  text-transform: uppercase;
	  background: $plos-one-pink;
	  color: $white;
		}

  }

@mixin circle($circumference: 18, $background: $plos-default) {
  width: $circumference+px;
  height: $circumference+px;
  background: $background;
  border-radius: ($circumference/2)+px;
  text-align: center;
  line-height: $circumference+px;
}
/*doc
---
title: blocks
name: blocks
category: components
---

Blocks are essentially boxes with some defaults, such as color and bottom margin. You can either use the extendable classes below or the mixin if you need more flexibility. if you are using a certain style over and over feel free to add a extendable class of your own.

### Extendable Classes
We created extendable classes for some commonly used blocks.

example | extension
--------|----------
<p class="block">I am a block - usually on the homepage</p> | `@extend .block`
<div class="padded-example" style="color:black"><p class="block-noshadow">I am a block - with no shadow </p></div> | `@extend .block-noshadow`
<p class="block-card ">I am a block - with padding and no border radius</p> | `@extend .block-card`

###Mixin
We also have a mixin you can use to create your own blocks:
`@include blocks();`

variable  | result   | default
------------------------------------------| ----------------- | ---------
`$radius: top` | default radius on the top corners of block   |  yes
`$radius: none` | no radius  |
`$radius: all` | default radius on all corners of block   |
`$padding: default` | block has a padding of `$pad-small` - 10px   |   yes
`$padding: none` |  block has no padding |
`$padding: NUMBER` | allows you to set the number padding - use variables |
`$color: COLOR` | sets the background color   |   `$white`
*/

@mixin blocks($color: $white, $radius: none, $padding: default, $shadow: none) {
  // set block radius
  @if $radius == top {
    @include border-top-radius();
  } @if $radius == none {
     // no radius
  } @if $radius == all {
    border-radius: $border-radius-default;
}
  // set block padding
  @if $padding == default {
    padding: $pad-xsmall $pad-small $pad-xsmall $pad-xsmall;
  } @else if $padding == none{
    padding: 0;
  } @else {
    padding: $padding;
}
  // set block shadow
  @if $shadow == default{
    @include single-box-shadow();
  } @if $shadow == none{
    // no shadow
  }
  margin-bottom: $grid-gutter;
  background: $color;
}

.block{
  @include blocks();
}
.block-noshadow{
  @include blocks($shadow: none);
}
.block-card {
  @include blocks($radius: none, $padding: none);
  @include border-default;
}
.block-dark{
  @include blocks($radius: none, $color: $grey-dark, $shadow: none)
}

///PLACEHOLDER STYLES
@mixin stub() {
  background-color: $grey-med-light;
  color: $white;
}

.action-label {
  display:inline-block;
  float: left;
  margin-right: rem-calc(4);
  @extend %brand-background;
  border-radius: $border-radius-smaller;
}
// for one-line truncates
@mixin truncated ($width: 100%) {
  width: $width;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

/// for regular text that gets highlighted. For text that is already highlighted in some way you can
// just use the sass code that reflects that element.

@mixin tooltip-trigger( $padding: $pad-xsmall, $outside-box:none){
  padding: $padding;
  @include single-transition(background-color);
  @if $outside-box == yes {
    padding-left: 0;
  }
  .active &, &.highlighted,  .highlighted &{
    a, a:hover{color: $white;}
    @include rounded-pill( $padding: $padding, $hover: false);
    @if $outside-box == yes {
      margin-left: -$padding;
    }

    .author-name{
      @include rounded-pill($padding: rem-calc(2 4),$hover: false);
    }

  }
}

// creates a standard tooltip blue box etc.
@mixin tooltip($width: 320, $outside-box:none, $tooltip-padding: $pad-small){
  @include rounded-pill($padding: $tooltip-padding, $hover: false);
  padding-right: $pad-default;   //TODO put padding in closer
  width: rem-calc($width);

  .close{
    @extend .closer;
    position: absolute;
    top: $pad-xsmall;
    right: $pad-xsmall;
  }
   margin-left: 0;
}

@mixin arrow-bottom($arrow-size: 8, $arrow-color:$plos-default) {&:after {
  content: '\A';
  top: 100%;
  left: 50%;
  border: solid transparent;
  content: " ";
  height: 0;
  width: 0;
  position: absolute;

  border-top-color: $arrow-color;
  border-width: rem-calc($arrow-size);
  margin-left: -rem-calc($arrow-size);
}}

 // this is for a tooltip with a bullet list.

.tooltip-aside{
  @include tooltip($width: 160, $tooltip-padding: rem-calc(15 10 10 20));
  display: block;

  li {
    font-size: $txt-size-medium-large;
    font-weight: $bold;
    text-align: left;
    list-style-type: disc;
    list-style-position: inside;
    padding-bottom: rem-calc(8);

    a {
      @extend %link-text-body;
      font-weight: $bold;
      color:$white;

      &:hover {
        color: $clr-tooltip-text;
      }
    }

  }
}

//// for JS widgets - these are to separate

@mixin js-tooltip-container{
  position:relative;
}
@mixin js-tooltip-target($margintop: $pad-default){
  top: 0;
  height: 0;
  position: absolute;
  margin-top: $margintop;   /// margin to prevent blinking between the trigger and the tooltip
  opacity: 0;
  visibility: hidden;
  z-index: map-get($zindex, invisible);
  @include single-transition(opacity);
  &.visible{
    opacity: 1;
    z-index: map-get($zindex, dropdown);
    visibility: visible;
    height:auto;
  }
}

// navigation styles

// TODO - write some docs
@mixin border-width-adjust($border-width: rem-calc(2), $spacing: $pad-small, $border-color: $clr-highlight) {
  border-left: $border-width solid $border-color;
  padding-left: ($spacing - $border-width);
}

@mixin nav-side($txt-color: $grey-med-dark, $pad-left: $pad-small, $pad-y: rem-calc(2), $margin-bottom: $pad-xsmall) {
  @extend .no-bullet;

  margin-bottom: ($margin-bottom * 2);
  padding-bottom: ($margin-bottom * 2);

  li {
    margin: 0 0 $margin-bottom 0;

    a {
      padding: $pad-y 0;
      padding-left: $pad-left;
      @include link-text($color: $txt-color);
    }
  }
}

@mixin nav-enhanced($txt-color-hover: $clr-body-text, $spacing-left: $pad-small, $txt-color: $grey-med) {
  @include nav-side;
  margin-right: 0;

  > li {

    > a {
      display: block;
      color: $txt-color;
      &:hover {
        @include border-width-adjust($border-width: rem-calc(1),$spacing: $spacing-left);
        color: $txt-color;
      }
    }
    > ul {
      display: none;
      margin:0;
      margin-bottom:0;
      margin-top: $pad-xsmall;
      padding-bottom:0;
    }

    &.active {
       > a {
        @include border-width-adjust($spacing: $spacing-left);
        color: $txt-color-hover;
        font-weight: $bold;
        letter-spacing: -.5px;
      }
      > ul {
        display: block;
        li a {
          padding-left: ($spacing-left * 2);
          &:hover {
            @include border-width-adjust($border-width: rem-calc(1), $spacing: ($spacing-left * 2));
          }
        }
        li.active a{
          @include border-width-adjust($spacing:($spacing-left * 2));
        }

        &.suppress_expansion {
          display: none;
        }

      }

    }

  }

}

/*
Modal component
*/

%modal-close-button {
  background: image-url('sprite.fv.png') no-repeat -40px 0;
  position: absolute;
  top: 0;
  right: 0;
  width: $modal-close-btn-width;
  height: $modal-close-btn-height;
  cursor: pointer;
  color: $grey-light;
  border-left: 1px $grey-light solid;
  &:hover {
    border-left: none;
    @extend %brand-background;
  }
}

%modal {
  @extend .reveal-modal;

  top: $pad-default;
  background-color: white;
  padding: $pad-default;
  position: fixed;

  .close-reveal-modal {
    @extend %modal-close-button;
    @extend %brand-background;

    &:hover {
      background-color: $clr-highlight;
    }
  }
}

.reveal-modal-bg {
  background-color: $modal-overlay-bg-color;
}


/*
TypeAhead
*/

.twitter-typeahead {
  .tt-menu {
    background-color: white;
    min-width: 100%;
    border: 1px solid $grey-med-light;
    border-top-color: transparent;
    padding: $pad-small/2 0;
  }
  h5 {
    font-weight: $bold;
    padding: $pad-small/2 $pad-small;
    margin: 0;
  }
  .tt-suggestion {
    padding: $pad-small/2 $pad-small;
    margin: 0;

    &.tt-cursor,&:hover {
      @extend %brand-background;
      cursor: pointer;
    }
  }
}

// js utilities
.pos-right {   // used in tooltip.js
  right:0
}

 .shim {
   height: 50px;   //TODO - make this  dynamic
   position: absolute;
   width: 100%;
 }
